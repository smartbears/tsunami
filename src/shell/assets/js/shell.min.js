App = Em.Application.create({
    rootElement: $(".view-container")
}), App.Router.map(function() {
    this.resource("procedures", function() {
        this.resource("procedure", {
            path: "/:id"
        }, function() {
            this.route("edit");
        }), this.route("add");
    }), this.resource("subjects", function() {
        this.resource("subject", {
            path: "/:id"
        }, function() {
            this.route("edit");
        }), this.route("add");
    }), this.resource("alergies", function() {
        this.resource("alergy", {
            path: "/:id"
        }, function() {
            this.route("edit");
        }), this.route("add");
    }), this.resource("dnd");
}), App.ProceduresRoute = Ember.Route.extend({
    model: function() {
        return this.store.find("procedure");
    }
}), App.ProcedureRoute = Ember.Route.extend({
    model: function(a) {
        return this.store.find("procedure", a.id);
    }
}), App.SubjectsRoute = Ember.Route.extend({
    model: function() {
        return this.store.find("subject");
    }
}), App.SubjectRoute = Ember.Route.extend({
    model: function(a) {
        return this.store.find("subject", a.id);
    }
}), App.AlergiesRoute = Ember.Route.extend({
    model: function() {
        return this.store.find("alergy");
    }
}), App.AlergyRoute = Ember.Route.extend({
    model: function(a) {
        return this.store.find("alergy", a.id);
    }
}), App.DndRoute = Ember.Route.extend({
    model: function() {
        return {
            inFolder: [ {
                id: 1,
                name: "Procedure 1"
            }, {
                id: 2,
                name: "Procedure 2"
            }, {
                id: 3,
                name: "Procedure 3"
            } ],
            inTrash: [ {
                id: 4,
                name: "Procedure 4"
            } ]
        };
    }
});

var get = Ember.get, forEach = Ember.ArrayPolyfills.forEach;

DS.WebAPIAdapter = DS.RESTAdapter.extend({
    defaultSerializer: "DS/WebAPI",
    corsWithCredentials: !0,
    createRecord: function(a, b, c) {
        var d = {};
        d = a.serializerFor(b.typeKey).serialize(c, {
            includeId: !1
        });
        var e = a.serializerFor(b.typeKey).primaryKey;
        return e && delete d[e], this.ajax(this.buildURL(b.typeKey), "POST", {
            data: d
        });
    },
    deleteRecord: function(a, b, c) {
        var d = get(c, "id");
        return console.log(d), this.ajax(this.buildURL(b.typeKey, d), "DELETE", {
            data: d
        });
    },
    updateRecord: function(a, b, c) {
        var d = {};
        return d = a.serializerFor(b.typeKey).serialize(c, {
            includeId: !0
        }), this.ajax(this.buildURL(b.typeKey, d.id), "PUT", {
            data: d
        }, c);
    },
    ajax: function(a, b, c, d) {
        var e = get(this, "antiForgeryTokenSelector");
        if (e) {
            var f = $(e).val();
            f && (this.headers = {
                RequestVerificationToken: f
            });
        }
        var g = this;
        return new Ember.RSVP.Promise(function(e, f) {
            if (c = c || {}, c.url = a, c.type = b, c.dataType = "json", c.context = g, console.log("here"), 
            c.crossDomain = !0, c.data && "GET" !== b && (c.contentType = "application/json; charset=utf-8", 
            c.data = JSON.stringify(c.data)), void 0 !== g.headers) {
                var h = g.headers;
                c.beforeSend = function(a) {
                    forEach.call(Ember.keys(h), function(b) {
                        a.setRequestHeader(b, h[b]);
                    });
                };
            }
            c.success = function(a) {
                void 0 === a && "PUT" === b ? d.send("didCommit") : Ember.run(null, e, a);
            }, c.error = function(a) {
                a && (a.then = null), Ember.run(null, f, a);
            }, Ember.$.ajax(c);
        });
    }
}), App.ApplicationAdapter = DS.FixtureAdapter, App.Store = DS.Store.extend({});

var get = Ember.get;

DS.WebAPISerializer = DS.RESTSerializer.extend({
    extractSingle: function(a, b, c) {
        var d = b.typeKey, e = d, f = {};
        return f[e] = c, c = f, this._super.apply(this, arguments);
    },
    extractArray: function(a, b, c) {
        return c;
    }
}), App.Subject = DS.Model.extend({
    firstName: DS.attr("string"),
    middleName: DS.attr("string"),
    lastName: DS.attr("string"),
    address: DS.attr("string"),
    zipCode: DS.attr("string"),
    city: DS.attr("string"),
    state: DS.attr("string"),
    country: DS.attr("string"),
    email: DS.attr("string"),
    homePhone: DS.attr("string"),
    workPhone: DS.attr("string"),
    cellPhone: DS.attr("string"),
    alternatedCellPhone: DS.attr("string"),
    birthday: DS.attr("date"),
    gender: DS.attr("string"),
    height: DS.attr("number"),
    weight: DS.attr("number"),
    heartRate: DS.attr("string"),
    bloodPreasure: DS.attr("string"),
    race: DS.attr("string"),
    ethnicity: DS.attr("string"),
    maritalStatus: DS.attr("string"),
    fullName: function() {
        var a = " " + this.get("middleName");
        return a.length > 1 && (a += " "), this.get("firstName") + a + this.get("lastName");
    }.property("firstName", "middleName", "lastName")
}), App.Guardian = DS.Model.extend({
    name: DS.attr("string"),
    relationShip: DS.attr("string"),
    facilityType: DS.attr("string"),
    facility: DS.attr("string"),
    address: DS.attr("string"),
    email: DS.attr("string"),
    phone: DS.attr("string")
}), App.Medication = DS.Model.extend({
    name: DS.attr("string"),
    dosage: DS.attr("string"),
    from: DS.attr("date"),
    to: DS.attr("date"),
    comments: DS.attr("string")
}), App.Condition = DS.Model.extend({
    name: DS.attr("string"),
    since: DS.attr("date"),
    comments: DS.attr("string")
}), App.Alergy = DS.Model.extend({
    name: DS.attr("string"),
    reaction: DS.attr("string"),
    reactionOn: DS.attr("date"),
    comments: DS.attr("string")
}), App.Immunization = DS.Model.extend({
    name: DS.attr("string"),
    administeredOn: DS.attr("date"),
    comments: DS.attr("string")
}), App.Procedure = DS.Model.extend({
    name: DS.attr("string"),
    performedOn: DS.attr("date"),
    comments: DS.attr("string"),
    visit: DS.belongsTo("visit")
}), App.Visit = DS.Model.extend({
    name: DS.attr("string"),
    procedures: DS.hasMany("procedure")
}), App.Subject.reopenClass({
    FIXTURES: [ {
        id: 1,
        name: "Jorge",
        age: 25
    }, {
        id: 2,
        name: "Javier",
        age: 30
    } ]
}), App.Procedure.reopenClass({
    FIXTURES: [ {
        id: 1,
        name: "Liver Checking",
        comments: ""
    }, {
        id: 2,
        name: "Stomach Checking",
        comments: ""
    }, {
        id: 3,
        name: "Breath Checking",
        comments: ""
    }, {
        id: 4,
        name: "Height Checking",
        comments: ""
    }, {
        id: 5,
        name: "X Rays",
        comments: ""
    }, {
        id: 6,
        name: "Pressure Checking",
        comments: ""
    }, {
        id: 7,
        name: "Electrocardiogram",
        comments: ""
    } ]
}), App.DragElementComponent = Ember.Component.extend({
    tagName: "div",
    attributeBindings: [ "draggable", "elementName", "item", "tag:tagName", "id", "class" ],
    draggable: "true",
    elementName: null,
    item: null,
    dragStart: function(a) {
        if (this.get("elementName")) {
            var b = {};
            b.container = !0, b.item = this.get("item"), b.elementName = this.get("elementName"), 
            a.dataTransfer.setData("text", JSON.stringify(b));
        } else a.dataTransfer.setData("text", JSON.stringify(this.get("item")));
    }
}), App.DropElementComponent = Ember.Component.extend({
    tagName: "div",
    attributeBindings: [ "elementName" ],
    elementName: "",
    dragOver: function(a) {
        return a.preventDefault(), a.stopPropagation(), !1;
    },
    drop: function(a) {
        var b = a.dataTransfer.getData("text"), c = JSON.parse(b);
        return a.preventDefault(), c.container ? this.sendAction("dropAction", c.item, this.elementName, c.elementName) : this.sendAction("dropAction", c, this.elementName), 
        !1;
    }
}), Handlebars.registerHelper("ifCond", function(a, b, c, d) {
    switch (b) {
      case "==":
        return a == c ? d.fn(this) : d.inverse(this);

      case "===":
        return a === c ? d.fn(this) : d.inverse(this);

      case "<":
        return c > a ? d.fn(this) : d.inverse(this);

      case "<=":
        return c >= a ? d.fn(this) : d.inverse(this);

      case ">":
        return a > c ? d.fn(this) : d.inverse(this);

      case ">=":
        return a >= c ? d.fn(this) : d.inverse(this);

      case "&&":
        return a && c ? d.fn(this) : d.inverse(this);

      case "||":
        return a || c ? d.fn(this) : d.inverse(this);

      default:
        return d.inverse(this);
    }
}), App.AlergyController = Ember.ObjectController.extend({
    isEditing: !1,
    actions: {
        edit: function() {
            this.set("isEditing", !0);
        },
        doneEditing: function() {
            var a = this.get("model");
            a.save(), this.set("isEditing", !1);
        },
        "delete": function() {
            var a = this.get("model");
            a.destroyRecord();
        }
    }
}), App.AlergiesController = Ember.ObjectController.extend({
    isSearching: !1,
    actions: {
        search: function() {
            var a = this.get("searchPattern"), b = this.store.all("alergy");
            a && (this.set("isSearching", !0), this.set("model", b.filter(function(b) {
                return b.get("name").toLowerCase().match(a.toLowerCase());
            })));
        },
        doneSearch: function() {
            this.set("isSearching", !1), this.set("model", this.store.all("alergy")), this.transitionToRoute("alergies");
        }
    }
}), App.AlergiesAddController = Ember.ObjectController.extend({
    actions: {
        add: function() {
            var a = this.store.createRecord("alergy", {
                name: this.get("name"),
                reaction: this.get("reaction"),
                reactionOn: Date.now(),
                comments: this.get("comments")
            });
            a.save(), this.transitionToRoute("alergies");
        }
    }
}), App.ProcedureController = Ember.ObjectController.extend({
    isEditing: !1,
    actions: {
        edit: function() {
            this.set("isEditing", !0);
        },
        doneEditing: function() {
            var a = this.get("model");
            a.save().then(function() {
                $("." + a.get("id") + " span").each(function() {
                    $(this).text(a.get("name"));
                });
            }), this.set("isEditing", !1);
        },
        "delete": function() {
            var a = this.get("model");
            $("." + a.get("id")).each(function() {
                $(this).fadeOut("slow", function() {
                    $(this).remove();
                });
            }).then(function() {
                a.destroyRecord();
            }), this.transitionToRoute("procedures");
        }
    }
}), App.ProceduresController = Ember.ObjectController.extend({
    isCreating: !1,
    actions: {
        newProcedure: function() {
            this.set("isCreating", !0), this.transitionToRoute("procedures");
        },
        addProcedure: function() {
            this.set("isCreating", !1);
            var a = this.store.createRecord("procedure", {
                name: this.get("name"),
                performedOn: Date.now(),
                comments: this.get("comments")
            });
            a.save(), this.set("name", ""), this.set("comments", ""), this.transitionToRoute("procedures");
        },
        cancelProcedure: function() {
            this.set("isCreating", !1), this.transitionToRoute("procedures");
        },
        acceptElement: function(a, b) {
            var c = this.store.getById("procedure", a);
            $("#" + b + " .col-md-5 ." + a).length <= 0 ? $("#" + b + " .col-md-5").append('<div class="list-group-item ' + a + '" style="font-size: 14px;">\n                                                              <span>' + c.get("name") + "</span>\n                                                          </div>") : alert('The procedure "' + c.get("name") + '" already exist in the current visit.');
        },
        destroyVisit: function(a) {
            $("#" + a).fadeOut("slow", function() {
                $(this).remove();
            });
        }
    }
}), App.ProceduresAddController = Ember.ObjectController.extend({
    actions: {
        add: function() {
            var a = this.store.createRecord("procedure", {
                name: this.get("name"),
                reaction: this.get("reaction"),
                reactionOn: Date.now(),
                comments: this.get("comments")
            });
            a.save(), this.transitionToRoute("procedures");
        }
    }
}), App.SubjectController = Ember.ObjectController.extend({
    isEditing: !1,
    actions: {
        edit: function() {
            this.set("isEditing", !0);
        },
        doneEditing: function() {
            var a = this.get("model");
            a.save(), this.set("isEditing", !1);
        },
        "delete": function() {
            var a = this.get("model");
            a.destroyRecord();
        }
    }
}), App.SubjectsController = Ember.ObjectController.extend({
    isSearching: !1,
    actions: {
        search: function() {
            var a = this.get("searchPattern"), b = this.store.all("subject");
            a && (this.set("isSearching", !0), this.set("model", b.filter(function(b) {
                return null != b.get("firstName") ? b.get("firstName").toLowerCase().match(a.toLowerCase()) : !1;
            })));
        },
        doneSearch: function() {
            this.set("isSearching", !1), this.set("model", this.store.all("subject")), this.transitionToRoute("subjects");
        },
        dropDelete: function(a) {
            var b = this.store.getById("subject", a);
            b.destroyRecord();
        }
    }
}), App.SubjectsAddController = Ember.ObjectController.extend({
    actions: {
        add: function() {
            var a = this.store.createRecord("subject", {
                firstName: this.get("firstName"),
                middleName: this.get("middleName"),
                lastName: this.get("lastName"),
                address: this.get("address"),
                zipCode: this.get("zipCode"),
                city: this.get("city"),
                state: this.get("state"),
                country: this.get("country"),
                email: this.get("email"),
                homePhone: this.get("homePhone"),
                workPhone: this.get("workPhone"),
                cellPhone: this.get("cellPhone"),
                alternatedCellPhone: this.get("alternatedCellPhone"),
                birthday: Date.now(),
                height: 10,
                weight: 10
            });
            a.save().then(function() {
                $("table tr").last().attr("item", a.get("id"));
            }), this.transitionToRoute("subjects");
        }
    }
});