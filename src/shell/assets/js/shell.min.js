var forEach = Ember.EnumerableUtils.forEach;

var get = Ember.get;

function setKey(a, b) {
    a.id = Ember.generateGuid(null, b);
    a.autoGenerated = true;
}

function extractEmbeddedRecords(a, b, c, d) {
    c.eachRelationship(function(c, e) {
        if (a.hasDeserializeRecordsOption(c)) {
            var f = b.modelFor(e.type.typeKey);
            if (e.kind === "hasMany") {
                extractEmbeddedHasMany(b, c, f, e, d);
            }
            if (e.kind === "belongsTo") {
                extractEmbeddedBelongsTo(b, c, f, e, d);
            }
        }
    });
    return d;
}

function extractEmbeddedHasMany(a, b, c, d, e) {
    if (!e[b]) {
        return e;
    }
    var f = [];
    var g = a.serializerFor(c.typeKey);
    var h = a.serializerFor(d.parentType.typeKey);
    var i = h.hasNoKeyOption(b);
    for (var j = 0; j < e[b].length; j++) {
        var k = e[b][j];
        var l = g.normalize(c, k, null);
        if (i && l.id == null) {
            setKey(l, c);
        }
        a.push(c, l);
        f.push(l.id);
    }
    e[b] = f;
    return e;
}

function extractEmbeddedBelongsTo(a, b, c, d, e) {
    if (!e[b]) {
        return e;
    }
    var f = a.serializerFor(c.typeKey);
    var g = a.serializerFor(d.parentType.typeKey);
    var h = g.hasNoKeyOption(b);
    var i = f.normalize(c, e[b], null);
    if (h && i.id == null) {
        setKey(i, c);
    }
    a.push(c, i);
    e[b] = i.id;
    return e;
}

DS.NoKeyMixin = Ember.Mixin.create({
    normalize: function(a, b, c) {
        if (!b) {
            return b;
        }
        this.normalizeId(b);
        this.normalizeAttributes(a, b);
        this.normalizeRelationships(a, b);
        this.normalizeUsingDeclaredMapping(a, b);
        this.applyTransforms(a, b);
        var d = b;
        return extractEmbeddedRecords(this, this.store, a, d);
    },
    serializeBelongsTo: function(a, b, c) {
        var d = c.key;
        if (this.noSerializeOptionSpecified(d)) {
            this._super(a, b, c);
            return;
        }
        var e = this.hasSerializeIdsOption(d);
        var f = this.hasSerializeRecordsOption(d);
        var g = a.get(d);
        var h, i;
        if (e) {
            h = this.keyForRelationship(d, c.kind);
            if (!g) {
                b[h] = null;
            } else {
                b[h] = get(g, "id");
            }
        } else if (f) {
            h = this.keyForAttribute(d);
            if (!g) {
                b[h] = null;
            } else {
                i = this.hasNoKeyOption(h) === false;
                b[h] = g.serialize({
                    includeId: i
                });
                this.removeEmbeddedForeignKey(a, g, c, b[h]);
            }
        }
    },
    serializeHasMany: function(a, b, c) {
        var d = c.key;
        if (this.noSerializeOptionSpecified(d)) {
            this._super(a, b, c);
            return;
        }
        var e = this.hasSerializeIdsOption(d);
        var f = this.hasSerializeRecordsOption(d);
        var g, h;
        if (e) {
            g = this.keyForRelationship(d, c.kind);
            b[g] = get(a, d).mapBy("id");
        } else if (f) {
            g = this.keyForAttribute(d);
            b[g] = get(a, d).map(function(b) {
                h = this.hasNoKeyOption(g) === false;
                var d = b.serialize({
                    includeId: h
                });
                this.removeEmbeddedForeignKey(a, b, c, d);
                return d;
            }, this);
        }
    },
    hasNoKeyOption: function(a) {
        var b = this.attrsOption(a);
        return b && b.noKey === true && b.embedded === "always";
    }
});

App = Em.Application.create({
    rootElement: $(".view-container")
});

App.Router.map(function() {
    this.resource("procedures", function() {
        this.resource("procedure", {
            path: "/:id"
        }, function() {
            this.route("edit");
        });
        this.route("add");
    });
    this.resource("subjects", function() {
        this.resource("subject", {
            path: "/:id"
        }, function() {
            this.route("edit");
        });
        this.route("add");
    });
    this.resource("allergies", function() {
        this.resource("allergy", {
            path: "/:id"
        }, function() {
            this.route("edit");
        });
        this.route("add");
    });
    this.resource("dnd");
});

App.ProceduresRoute = Ember.Route.extend({
    model: function() {
        return this.store.find("procedure");
    }
});

App.ProcedureRoute = Ember.Route.extend({
    model: function(a) {
        return this.store.find("procedure", a.id);
    }
});

App.SubjectsRoute = Ember.Route.extend({
    model: function() {
        return this.store.find("subject");
    }
});

App.SubjectRoute = Ember.Route.extend({
    model: function(a) {
        return this.store.find("subject", a.id);
    }
});

App.SubjectsAddRoute = Ember.Route.extend({
    model: function() {
        return {
            contactInformation: {},
            demographic: {},
            guardian: {},
            allergies: []
        };
    }
});

App.AllergiesRoute = Ember.Route.extend({
    model: function() {
        return this.store.find("allergy");
    }
});

App.AllergyRoute = Ember.Route.extend({
    model: function(a) {
        return this.store.find("allergy", a.id);
    }
});

App.DndRoute = Ember.Route.extend({
    model: function() {
        return {
            inFolder: [ {
                id: 1,
                name: "Procedure 1"
            }, {
                id: 2,
                name: "Procedure 2"
            }, {
                id: 3,
                name: "Procedure 3"
            } ],
            inTrash: [ {
                id: 4,
                name: "Procedure 4"
            } ]
        };
    }
});

App.Procedure = DS.Model.extend({
    name: DS.attr("string"),
    performedOn: DS.attr("date"),
    comments: DS.attr("string")
});

App.Protocol = DS.Model.extend({
    name: DS.attr("string"),
    enrollmentWindow: DS.attr("date"),
    visits: DS.hasMany("visit")
});

var get = Ember.get;

var forEach = Ember.ArrayPolyfills.forEach;

DS.WebAPIAdapter = DS.RESTAdapter.extend({
    defaultSerializer: "DS/WebAPI",
    corsWithCredentials: true,
    createRecord: function(a, b, c) {
        var d = {};
        d = a.serializerFor(b.typeKey).serialize(c, {
            includeId: false
        });
        var e = a.serializerFor(b.typeKey).primaryKey;
        if (e) {
            delete d[e];
        }
        return this.ajax(this.buildURL(b.typeKey), "POST", {
            data: d
        });
    },
    deleteRecord: function(a, b, c) {
        var d = get(c, "id");
        console.log(d);
        return this.ajax(this.buildURL(b.typeKey, d), "DELETE", {
            data: d
        });
    },
    updateRecord: function(a, b, c) {
        var d = {};
        d = a.serializerFor(b.typeKey).serialize(c, {
            includeId: true
        });
        return this.ajax(this.buildURL(b.typeKey, d.id), "PUT", {
            data: d
        }, c);
    },
    ajax: function(a, b, c, d) {
        var e = get(this, "antiForgeryTokenSelector");
        if (e) {
            var f = $(e).val();
            if (f) {
                this.headers = {
                    RequestVerificationToken: f
                };
            }
        }
        var g = this;
        return new Ember.RSVP.Promise(function(e, f) {
            c = c || {};
            c.url = a;
            c.type = b;
            c.dataType = "json";
            c.context = g;
            console.log("here");
            c.crossDomain = true;
            if (c.data && b !== "GET") {
                c.contentType = "application/json; charset=utf-8";
                c.data = JSON.stringify(c.data);
            }
            if (g.headers !== undefined) {
                var h = g.headers;
                c.beforeSend = function(a) {
                    forEach.call(Ember.keys(h), function(b) {
                        a.setRequestHeader(b, h[b]);
                    });
                };
            }
            c.success = function(a) {
                if (a === undefined && b === "PUT") {
                    d.send("didCommit");
                } else {
                    Ember.run(null, e, a);
                }
            };
            c.error = function(a, b, c) {
                if (a) {
                    a.then = null;
                }
                Ember.run(null, f, a);
            };
            Ember.$.ajax(c);
        });
    }
});

App.ApplicationAdapter = DS.RESTAdapter.extend({
    host: "http://localhost:8082/api"
});

App.Store = DS.Store.extend({});

var get = Ember.get;

DS.WebAPISerializer = DS.RESTSerializer.extend({
    extractSingle: function(a, b, c, d, e) {
        var f = b.typeKey;
        var g = f;
        var h = {};
        h[g] = c;
        c = h;
        return this._super.apply(this, arguments);
    },
    extractArray: function(a, b, c) {
        return c;
    }
});

App.Subject = DS.Model.extend({
    contactInformation: DS.belongsTo("contactInformation", {
        inverse: null
    }),
    demographic: DS.belongsTo("demographic", {
        inverse: null
    }),
    guardian: DS.belongsTo("guardian", {
        inverse: null
    }),
    allergies: DS.hasMany("allergy", {
        inverse: null
    })
});

App.SubjectSerializer = DS.RESTSerializer.extend(DS.EmbeddedRecordsMixin, DS.NoKeyMixin, {
    attrs: {
        contactInformation: {
            embedded: "always",
            noKey: true
        },
        demographics: {
            embedded: "always",
            noKey: true
        },
        guardian: {
            embedded: "always",
            noKey: true
        },
        allergies: {
            embedded: "always",
            noKey: true
        }
    }
});

App.ContactInformation = DS.Model.extend({
    firstName: DS.attr("string"),
    middleName: DS.attr("string"),
    lastName: DS.attr("string"),
    address: DS.attr("string"),
    zipCode: DS.attr("string"),
    city: DS.attr("string"),
    state: DS.attr("string"),
    country: DS.attr("string"),
    email: DS.attr("string"),
    homePhone: DS.attr("string"),
    workPhone: DS.attr("string"),
    cellPhone: DS.attr("string"),
    alternatedCellPhone: DS.attr("string"),
    fullName: function() {
        var a = " " + this.get("middleName");
        if (a.length > 1) a = a + " ";
        return this.get("firstName") + a + this.get("lastName");
    }.property("firstName", "middleName", "lastName")
});

App.Demographic = DS.Model.extend({
    birthday: DS.attr("string"),
    gender: DS.attr("string"),
    height: DS.attr("number"),
    weight: DS.attr("number"),
    heartRate: DS.attr("string"),
    bloodPreasure: DS.attr("string"),
    race: DS.attr("string"),
    ethnicity: DS.attr("string"),
    maritalStatus: DS.attr("string")
});

App.Guardian = DS.Model.extend({
    name: DS.attr("string"),
    relationShip: DS.attr("string"),
    facilityType: DS.attr("string"),
    facility: DS.attr("string"),
    address: DS.attr("string"),
    email: DS.attr("string"),
    phone: DS.attr("string")
});

App.Medication = DS.Model.extend({
    name: DS.attr("string"),
    dosage: DS.attr("string"),
    from: DS.attr("date"),
    to: DS.attr("date"),
    comments: DS.attr("string")
});

App.Condition = DS.Model.extend({
    name: DS.attr("string"),
    since: DS.attr("date"),
    comments: DS.attr("string")
});

App.Allergy = DS.Model.extend({
    name: DS.attr("string"),
    reaction: DS.attr("string"),
    reactionOn: DS.attr("date"),
    comments: DS.attr("string")
});

App.Immunization = DS.Model.extend({
    name: DS.attr("string"),
    administeredOn: DS.attr("date"),
    comments: DS.attr("string")
});

App.Visit = DS.Model.extend({
    label: DS.attr("string"),
    number: DS.attr("number"),
    procedures: DS.hasMany("procedure")
});

App.Subject.reopenClass({
    FIXTURES: [ {
        id: 1,
        firstName: "Jorge",
        middleName: "",
        lastName: "Rodriguez",
        age: 25,
        birthday: "02/20/2014 12:01 AM"
    }, {
        id: 2,
        firstName: "Jesus",
        middleName: "",
        lastName: "Perez",
        age: 35,
        birthday: "02/20/2014 12:00 AM"
    } ]
});

App.Protocol.reopenClass({
    FIXTURES: [ {
        id: 1,
        name: "L1V-MC-4590MK"
    }, {
        id: 2,
        name: "L2V-UI-3510MK"
    } ]
});

App.Visit.reopenClass();

App.Procedure.reopenClass({
    FIXTURES: [ {
        id: 1,
        name: "Measure presure",
        performedOn: null,
        comments: "This is test comment1"
    }, {
        id: 2,
        name: "Breath checking",
        performedOn: null,
        comments: "This is test comment2"
    }, {
        id: 3,
        name: "X rays",
        performedOn: null,
        comments: "This is test comment3"
    }, {
        id: 4,
        name: "Height",
        performedOn: null,
        comments: "This is test comment4"
    }, {
        id: 5,
        name: "Electrocardiogram",
        comments: ""
    } ]
});

App.DatePicker = Ember.TextField.extend({
    didInsertElement: function() {
        var a, b;
        a = this.get("format");
        b = function(a) {
            return function(b) {
                return a.set("date", b.date);
            };
        }(this);
        return this.$().datetimepicker({
            format: a,
            autoclose: true
        }).on("changeDate", b);
    },
    willDestroyElement: function() {
        return this.$().datetimepicker("remove");
    }
});

App.DragElementComponent = Ember.Component.extend({
    tagName: "div",
    attributeBindings: [ "draggable", "elementName", "item", "tag:tagName", "id", "class", "dragType" ],
    draggable: "true",
    elementName: null,
    item: null,
    dragStart: function(a) {
        var b = this.get("dragType");
        if (b == "visits") {
            $(this.element).animate({
                opacity: .25
            }, 500);
            var c = $(this.element).clone(true);
            c.contents().filter(".list-group-item").addClass("dragging-element");
            c.contents().filter(".list-group-item").contents().filter("button").remove();
            c.addClass("drag-element");
            a.dataTransfer.effectAllowed = "copy";
            document.body.appendChild(c[0]);
            a.dataTransfer.setDragImage(c[0], 0, 0);
        }
        if (this.get("elementName")) {
            var d = {};
            d.container = true;
            d.item = this.get("item");
            d.elementName = this.get("elementName");
            a.dataTransfer.setData("text", JSON.stringify(d));
        } else {
            a.dataTransfer.setData("text", JSON.stringify(this.get("item")));
        }
    },
    dragEnd: function(a) {
        var b = this.get("dragType");
        if (b == "visits") {
            $(this.element).animate({
                opacity: 1
            }, 500);
        }
    }
});

App.DropElementComponent = Ember.Component.extend({
    tagName: "div",
    attributeBindings: [ "elementName" ],
    elementName: "",
    dragOver: function(a) {
        a.preventDefault();
        a.stopPropagation();
        return false;
    },
    drop: function(a) {
        var b = a.dataTransfer.getData("text");
        var c = JSON.parse(b);
        a.preventDefault();
        if (c.container) {
            this.sendAction("dropAction", c.item, this.elementName, c.elementName);
        } else {
            this.sendAction("dropAction", c, this.elementName);
        }
        return false;
    }
});

App.ProcedureItemView = Ember.View.extend({});

App.VisitItemView = Ember.View.extend({
    templateName: "visit-item",
    attributeBindings: [ "elementName", "id", "name" ]
});

App.AlergyController = Ember.ObjectController.extend({
    isEditing: false,
    actions: {
        edit: function() {
            this.set("isEditing", true);
        },
        doneEditing: function() {
            var a = this.get("model");
            a.save();
            this.set("isEditing", false);
        },
        "delete": function() {
            var a = this.get("model");
            a.destroyRecord();
        }
    }
});

App.AlergiesController = Ember.ObjectController.extend({
    isSearching: false,
    actions: {
        search: function() {
            var a = this.get("searchPattern");
            var b = this.store.all("alergy");
            if (a) {
                this.set("isSearching", true);
                this.set("model", b.filter(function(b) {
                    return b.get("name").toLowerCase().match(a.toLowerCase());
                }));
            }
        },
        doneSearch: function() {
            this.set("isSearching", false);
            this.set("model", this.store.all("alergy"));
            this.transitionToRoute("alergies");
        }
    }
});

App.AlergiesAddController = Ember.ObjectController.extend({
    actions: {
        add: function() {
            var a = this.store.createRecord("alergy", {
                name: this.get("name"),
                reaction: this.get("reaction"),
                reactionOn: Date.now(),
                comments: this.get("comments")
            });
            a.save();
            this.transitionToRoute("alergies");
        }
    }
});

App.ProcedureController = Ember.ObjectController.extend({
    isEditing: false,
    actions: {
        edit: function() {
            this.set("isEditing", true);
        },
        doneEditing: function() {
            var a = this.get("model");
            a.save().then(function() {
                $("." + a.get("id") + " span").each(function() {
                    $(this).text(a.get("name"));
                });
            });
            this.set("isEditing", false);
        },
        "delete": function() {
            var a = this.get("model");
            $("." + a.get("id")).each(function() {
                $(this).fadeOut("slow", function() {
                    $(this).remove();
                });
            }).then(function() {
                a.destroyRecord();
            });
            this.transitionToRoute("procedures");
        }
    }
});

App.VisitController = Ember.ObjectController.extend({
    needs: [ "procedures" ],
    isRenamingView: false,
    actions: {
        destroyVisit: function(a) {
            $(".ember-view #" + a).fadeOut("slow", function() {
                $(this).remove();
            });
        },
        startRenaming: function() {
            this.toggleProperty("isRenamingView");
        },
        doneRenaming: function() {
            var a = this.get("model");
            a.save();
            this.toggleProperty("isRenamingView");
        },
        acceptElement: function(a, b, c) {
            var d = this.get("controllers.procedures").store.getById("procedure", a);
            if ($(".ember-view #" + b + " .col-md-5 .ember-view ." + a).length <= 0) {
                var e = Ember.View.create({
                    templateName: "procedure-item",
                    container: this.container,
                    id: a,
                    name: d.get("name")
                });
                e.appendTo($(".ember-view " + "#" + b + " .col-md-5").first());
            } else {
                alert('The procedure "' + d.get("name") + '" already exist in the current visit.');
            }
        }
    }
});

App.ProceduresController = Ember.ObjectController.extend({
    isCreating: false,
    visitCount: function() {
        var a = this.store.find("visit");
        return a.get("length");
    }.property(),
    actions: {
        newProcedure: function() {
            this.toggleProperty("isCreating");
            this.transitionToRoute("procedures");
        },
        addProcedure: function() {
            this.toggleProperty("isCreating");
            var a = this.store.createRecord("procedure", {
                name: this.get("name"),
                performedOn: Date.now(),
                comments: this.get("comments")
            });
            a.save();
            this.set("name", "");
            this.set("comments", "");
            this.transitionToRoute("procedures");
        },
        cancelProcedure: function() {
            this.set("isCreating", false);
            this.transitionToRoute("procedures");
        },
        newVisit: function() {
            this.incrementProperty("visitCount");
            var a = this.get("visitCount");
            var b = this.store.createRecord("visit", {
                label: "Visit " + a
            });
            b.save();
            var c = App.VisitController.create({
                model: b,
                container: this.container
            });
            var d = Ember.View.create({
                templateName: "visit-item",
                controller: c,
                container: this.container,
                elementName: "visit" + a,
                store: this.store
            });
            d.appendTo("#listOfVisits");
        }
    }
});

App.SubjectController = Ember.ObjectController.extend({
    isEditing: false,
    actions: {
        edit: function() {
            this.set("isEditing", true);
        },
        doneEditing: function() {
            var a = this.get("model");
            a.save();
            this.set("isEditing", false);
        },
        "delete": function() {
            var a = this.get("model");
            a.destroyRecord();
        }
    }
});

App.SubjectsController = Ember.ObjectController.extend({
    isSearching: false,
    actions: {
        search: function() {
            var a = this.get("searchPattern");
            var b = this.store.all("subject");
            if (a) {
                this.set("isSearching", true);
                this.set("model", b.filter(function(b) {
                    if (b.get("firstName") != null) return b.get("firstName").toLowerCase().match(a.toLowerCase()); else return false;
                }));
            }
        },
        doneSearch: function() {
            this.set("isSearching", false);
            this.set("model", this.store.all("subject"));
            this.transitionToRoute("subjects");
        },
        dropDelete: function(a, b, c) {
            var d = this.store.getById("subject", a);
            d.destroyRecord();
        }
    }
});

App.SubjectsAddController = Ember.ObjectController.extend({
    actions: {
        add: function() {
            var a = this.store.createRecord("subject", {
                contactInformation: this.store.createRecord("contactInformation", this.model.contactInformation),
                demographic: this.store.createRecord("demographic", this.model.demographics),
                guardian: this.store.createRecord("guardian", this.model.guardian)
            });
            a.get("allergies").pushObjects(this.model.allergies);
            a.save().then(function() {
                $("table tr").last().attr("item", a.get("id"));
            });
            this.transitionToRoute("subjects");
        },
        addAllergy: function() {
            this.model.allergies.pushObject(this.store.createRecord("allergy", {
                name: "randomName_" + Math.random()
            }));
        }
    }
});