function setKey(a, b) {
    a.id = Ember.generateGuid(null, b), a.autoGenerated = !0;
}

function extractEmbeddedRecords(a, b, c, d) {
    return c.eachRelationship(function(c, e) {
        if (a.hasDeserializeRecordsOption(c)) {
            var f = b.modelFor(e.type.typeKey);
            "hasMany" === e.kind && extractEmbeddedHasMany(b, c, f, e, d), "belongsTo" === e.kind && extractEmbeddedBelongsTo(b, c, f, e, d);
        }
    }), d;
}

function extractEmbeddedHasMany(a, b, c, d, e) {
    if (!e[b]) return e;
    for (var f = [], g = a.serializerFor(c.typeKey), h = a.serializerFor(d.parentType.typeKey), i = h.hasNoKeyOption(b), j = 0; j < e[b].length; j++) {
        var k = e[b][j], l = g.normalize(c, k, null);
        i && null == l.id && setKey(l, c), a.push(c, l), f.push(l.id);
    }
    return e[b] = f, e;
}

function extractEmbeddedBelongsTo(a, b, c, d, e) {
    if (!e[b]) return e;
    var f = a.serializerFor(c.typeKey), g = a.serializerFor(d.parentType.typeKey), h = g.hasNoKeyOption(b), i = f.normalize(c, e[b], null);
    return h && null == i.id && setKey(i, c), a.push(c, i), e[b] = i.id, e;
}

var forEach = Ember.EnumerableUtils.forEach, get = Ember.get;

DS.NoKeyMixin = Ember.Mixin.create({
    normalize: function(a, b) {
        if (!b) return b;
        this.normalizeId(b), this.normalizeAttributes(a, b), this.normalizeRelationships(a, b), 
        this.normalizeUsingDeclaredMapping(a, b), this.applyTransforms(a, b);
        var c = b;
        return extractEmbeddedRecords(this, this.store, a, c);
    },
    serializeBelongsTo: function(a, b, c) {
        var d = c.key;
        if (this.noSerializeOptionSpecified(d)) return this._super(a, b, c), void 0;
        var e, f, g = this.hasSerializeIdsOption(d), h = this.hasSerializeRecordsOption(d), i = a.get(d);
        g ? (e = this.keyForRelationship(d, c.kind), b[e] = i ? get(i, "id") : null) : h && (e = this.keyForAttribute(d), 
        i ? (f = this.hasNoKeyOption(e) === !1, b[e] = i.serialize({
            includeId: f
        }), this.removeEmbeddedForeignKey(a, i, c, b[e])) : b[e] = null);
    },
    serializeHasMany: function(a, b, c) {
        var d = c.key;
        if (this.noSerializeOptionSpecified(d)) return this._super(a, b, c), void 0;
        var e, f, g = this.hasSerializeIdsOption(d), h = this.hasSerializeRecordsOption(d);
        g ? (e = this.keyForRelationship(d, c.kind), b[e] = get(a, d).mapBy("id")) : h && (e = this.keyForAttribute(d), 
        b[e] = get(a, d).map(function(b) {
            f = this.hasNoKeyOption(e) === !1;
            var d = b.serialize({
                includeId: f
            });
            return this.removeEmbeddedForeignKey(a, b, c, d), d;
        }, this));
    },
    hasNoKeyOption: function(a) {
        var b = this.attrsOption(a);
        return b && b.noKey === !0 && "always" === b.embedded;
    }
}), App = Em.Application.create({
    rootElement: $(".view-container")
}), App.Router.map(function() {
    this.resource("procedures", function() {
        this.resource("procedure", {
            path: "/:id"
        }, function() {
            this.route("edit");
        }), this.route("add");
    }), this.resource("subjects", function() {
        this.resource("subject", {
            path: "/:id"
        }, function() {
            this.route("edit");
        }), this.route("add");
    }), this.resource("allergies", function() {
        this.resource("allergy", {
            path: "/:id"
        }, function() {
            this.route("edit");
        }), this.route("add");
    }), this.resource("dnd");
}), App.ProceduresRoute = Ember.Route.extend({
    model: function() {
        return this.store.find("procedure");
    }
}), App.ProcedureRoute = Ember.Route.extend({
    model: function(a) {
        return this.store.find("procedure", a.id);
    }
}), App.SubjectsRoute = Ember.Route.extend({
    model: function() {
        return this.store.find("subject");
    }
}), App.SubjectRoute = Ember.Route.extend({
    model: function(a) {
        return this.store.find("subject", a.id);
    }
}), App.SubjectsAddRoute = Ember.Route.extend({
    model: function() {
        return {
            contactInformation: {},
            demographic: {},
            guardian: {},
            allergies: []
        };
    }
}), App.AllergiesRoute = Ember.Route.extend({
    model: function() {
        return this.store.find("allergy");
    }
}), App.AllergyRoute = Ember.Route.extend({
    model: function(a) {
        return this.store.find("allergy", a.id);
    }
}), App.DndRoute = Ember.Route.extend({
    model: function() {
        return {
            inFolder: [ {
                id: 1,
                name: "Procedure 1"
            }, {
                id: 2,
                name: "Procedure 2"
            }, {
                id: 3,
                name: "Procedure 3"
            } ],
            inTrash: [ {
                id: 4,
                name: "Procedure 4"
            } ]
        };
    }
}), App.Procedure = DS.Model.extend({
    name: DS.attr("string"),
    performedOn: DS.attr("date"),
    comments: DS.attr("string")
}), App.Protocol = DS.Model.extend({
    name: DS.attr("string"),
    enrollmentWindow: DS.attr("date"),
    visits: DS.hasMany("visit")
});

var get = Ember.get, forEach = Ember.ArrayPolyfills.forEach;

DS.WebAPIAdapter = DS.RESTAdapter.extend({
    defaultSerializer: "DS/WebAPI",
    corsWithCredentials: !0,
    createRecord: function(a, b, c) {
        var d = {};
        d = a.serializerFor(b.typeKey).serialize(c, {
            includeId: !1
        });
        var e = a.serializerFor(b.typeKey).primaryKey;
        return e && delete d[e], this.ajax(this.buildURL(b.typeKey), "POST", {
            data: d
        });
    },
    deleteRecord: function(a, b, c) {
        var d = get(c, "id");
        return console.log(d), this.ajax(this.buildURL(b.typeKey, d), "DELETE", {
            data: d
        });
    },
    updateRecord: function(a, b, c) {
        var d = {};
        return d = a.serializerFor(b.typeKey).serialize(c, {
            includeId: !0
        }), this.ajax(this.buildURL(b.typeKey, d.id), "PUT", {
            data: d
        }, c);
    },
    ajax: function(a, b, c, d) {
        var e = get(this, "antiForgeryTokenSelector");
        if (e) {
            var f = $(e).val();
            f && (this.headers = {
                RequestVerificationToken: f
            });
        }
        var g = this;
        return new Ember.RSVP.Promise(function(e, f) {
            if (c = c || {}, c.url = a, c.type = b, c.dataType = "json", c.context = g, console.log("here"), 
            c.crossDomain = !0, c.data && "GET" !== b && (c.contentType = "application/json; charset=utf-8", 
            c.data = JSON.stringify(c.data)), void 0 !== g.headers) {
                var h = g.headers;
                c.beforeSend = function(a) {
                    forEach.call(Ember.keys(h), function(b) {
                        a.setRequestHeader(b, h[b]);
                    });
                };
            }
            c.success = function(a) {
                void 0 === a && "PUT" === b ? d.send("didCommit") : Ember.run(null, e, a);
            }, c.error = function(a) {
                a && (a.then = null), Ember.run(null, f, a);
            }, Ember.$.ajax(c);
        });
    }
}), App.ApplicationAdapter = DS.RESTAdapter.extend({
    host: "http://localhost:8082/api"
}), App.Store = DS.Store.extend({});

var get = Ember.get;

DS.WebAPISerializer = DS.RESTSerializer.extend({
    extractSingle: function(a, b, c) {
        var d = b.typeKey, e = d, f = {};
        return f[e] = c, c = f, this._super.apply(this, arguments);
    },
    extractArray: function(a, b, c) {
        return c;
    }
}), App.Subject = DS.Model.extend({
    contactInformation: DS.belongsTo("contactInformation", {
        inverse: null
    }),
    demographic: DS.belongsTo("demographic", {
        inverse: null
    }),
    guardian: DS.belongsTo("guardian", {
        inverse: null
    }),
    allergies: DS.hasMany("allergy", {
        inverse: null
    })
}), App.SubjectSerializer = DS.RESTSerializer.extend(DS.EmbeddedRecordsMixin, DS.NoKeyMixin, {
    attrs: {
        contactInformation: {
            embedded: "always",
            noKey: !0
        },
        demographics: {
            embedded: "always",
            noKey: !0
        },
        guardian: {
            embedded: "always",
            noKey: !0
        },
        allergies: {
            embedded: "always",
            noKey: !0
        }
    }
}), App.ContactInformation = DS.Model.extend({
    firstName: DS.attr("string"),
    middleName: DS.attr("string"),
    lastName: DS.attr("string"),
    address: DS.attr("string"),
    zipCode: DS.attr("string"),
    city: DS.attr("string"),
    state: DS.attr("string"),
    country: DS.attr("string"),
    email: DS.attr("string"),
    homePhone: DS.attr("string"),
    workPhone: DS.attr("string"),
    cellPhone: DS.attr("string"),
    alternatedCellPhone: DS.attr("string"),
    fullName: function() {
        var a = " " + this.get("middleName");
        return a.length > 1 && (a += " "), this.get("firstName") + a + this.get("lastName");
    }.property("firstName", "middleName", "lastName")
}), App.Demographic = DS.Model.extend({
    birthday: DS.attr("date"),
    gender: DS.attr("string"),
    height: DS.attr("number"),
    weight: DS.attr("number"),
    heartRate: DS.attr("string"),
    bloodPreasure: DS.attr("string"),
    race: DS.attr("string"),
    ethnicity: DS.attr("string"),
    maritalStatus: DS.attr("string")
}), App.Guardian = DS.Model.extend({
    name: DS.attr("string"),
    relationShip: DS.attr("string"),
    facilityType: DS.attr("string"),
    facility: DS.attr("string"),
    address: DS.attr("string"),
    email: DS.attr("string"),
    phone: DS.attr("string")
}), App.Medication = DS.Model.extend({
    name: DS.attr("string"),
    dosage: DS.attr("string"),
    from: DS.attr("date"),
    to: DS.attr("date"),
    comments: DS.attr("string")
}), App.Condition = DS.Model.extend({
    name: DS.attr("string"),
    since: DS.attr("date"),
    comments: DS.attr("string")
}), App.Allergy = DS.Model.extend({
    name: DS.attr("string"),
    reaction: DS.attr("string"),
    reactionOn: DS.attr("date"),
    comments: DS.attr("string")
}), App.Immunization = DS.Model.extend({
    name: DS.attr("string"),
    administeredOn: DS.attr("date"),
    comments: DS.attr("string")
}), App.Procedure = DS.Model.extend({
    name: DS.attr("string"),
    performedOn: DS.attr("date"),
    comments: DS.attr("string")
}), App.Visit = DS.Model.extend({
    name: DS.attr("string")
}), App.Visit = DS.Model.extend({
    number: DS.attr("number"),
    procedures: DS.hasMany("procedure")
}), App.Subject.reopenClass({
    FIXTURES: [ {
        id: 1,
        name: "Jorge",
        age: 25
    }, {
        id: 2,
        name: "Javier",
        age: 30
    } ]
}), App.Protocol.reopenClass({
    FIXTURES: [ {
        id: 1,
        name: "L1V-MC-4590MK"
    }, {
        id: 2,
        name: "L2V-UI-3510MK"
    } ]
}), App.Visit.reopenClass(), App.Procedure.reopenClass({
    FIXTURES: [ {
        id: 1,
        name: "Measure presure",
        performedOn: null,
        comments: "This is test comment1"
    }, {
        id: 2,
        name: "Breath checking",
        performedOn: null,
        comments: "This is test comment2"
    }, {
        id: 3,
        name: "X rays",
        performedOn: null,
        comments: "This is test comment3"
    }, {
        id: 4,
        name: "Height",
        performedOn: null,
        comments: "This is test comment4"
    }, {
        id: 5,
        name: "X Rays",
        comments: ""
    }, {
        id: 6,
        name: "Electrocardiogram",
        comments: ""
    } ]
}), App.DragElementComponent = Ember.Component.extend({
    tagName: "div",
    attributeBindings: [ "draggable", "elementName", "item", "tag:tagName", "id", "class", "dragType" ],
    draggable: "true",
    elementName: null,
    item: null,
    dragStart: function(a) {
        var b = this.get("dragType");
        if ("visits" == b) {
            $(this.element).animate({
                opacity: .25
            }, 500);
            var c = $(this.element).clone(!0);
            c.contents().filter(".list-group-item").addClass("dragging-element"), c.contents().filter(".list-group-item").contents().filter("button").remove(), 
            c.addClass("drag-element"), a.dataTransfer.effectAllowed = "copy", document.body.appendChild(c[0]), 
            a.dataTransfer.setDragImage(c[0], 0, 0);
        }
        if (this.get("elementName")) {
            var d = {};
            d.container = !0, d.item = this.get("item"), d.elementName = this.get("elementName"), 
            a.dataTransfer.setData("text", JSON.stringify(d));
        } else a.dataTransfer.setData("text", JSON.stringify(this.get("item")));
    },
    dragEnd: function() {
        var a = this.get("dragType");
        "visits" == a && $(this.element).animate({
            opacity: 1
        }, 500);
    }
}), App.DropElementComponent = Ember.Component.extend({
    tagName: "div",
    attributeBindings: [ "elementName" ],
    elementName: "",
    dragOver: function(a) {
        return a.preventDefault(), a.stopPropagation(), !1;
    },
    drop: function(a) {
        var b = a.dataTransfer.getData("text"), c = JSON.parse(b);
        return a.preventDefault(), c.container ? this.sendAction("dropAction", c.item, this.elementName, c.elementName) : this.sendAction("dropAction", c, this.elementName), 
        !1;
    }
}), App.ProcedureItemView = Ember.View.extend({}), App.VisitItemView = Ember.View.extend({
    templateName: "visit-item",
    attributeBindings: [ "elementName", "id", "name" ]
}), App.AlergyController = Ember.ObjectController.extend({
    isEditing: !1,
    actions: {
        edit: function() {
            this.set("isEditing", !0);
        },
        doneEditing: function() {
            var a = this.get("model");
            a.save(), this.set("isEditing", !1);
        },
        "delete": function() {
            var a = this.get("model");
            a.destroyRecord();
        }
    }
}), App.AlergiesController = Ember.ObjectController.extend({
    isSearching: !1,
    actions: {
        search: function() {
            var a = this.get("searchPattern"), b = this.store.all("alergy");
            a && (this.set("isSearching", !0), this.set("model", b.filter(function(b) {
                return b.get("name").toLowerCase().match(a.toLowerCase());
            })));
        },
        doneSearch: function() {
            this.set("isSearching", !1), this.set("model", this.store.all("alergy")), this.transitionToRoute("alergies");
        }
    }
}), App.AlergiesAddController = Ember.ObjectController.extend({
    actions: {
        add: function() {
            var a = this.store.createRecord("alergy", {
                name: this.get("name"),
                reaction: this.get("reaction"),
                reactionOn: Date.now(),
                comments: this.get("comments")
            });
            a.save(), this.transitionToRoute("alergies");
        }
    }
}), App.ProcedureController = Ember.ObjectController.extend({
    isEditing: !1,
    actions: {
        edit: function() {
            this.set("isEditing", !0);
        },
        doneEditing: function() {
            var a = this.get("model");
            a.save().then(function() {
                $("." + a.get("id") + " span").each(function() {
                    $(this).text(a.get("name"));
                });
            }), this.set("isEditing", !1);
        },
        "delete": function() {
            var a = this.get("model");
            $("." + a.get("id")).each(function() {
                $(this).fadeOut("slow", function() {
                    $(this).remove();
                });
            }).then(function() {
                a.destroyRecord();
            }), this.transitionToRoute("procedures");
        }
    }
}), App.VisitController = Ember.ObjectController.extend({
    store: null,
    isRenamingView: !1,
    actions: {
        destroyVisit: function(a) {
            $(".ember-view #" + a).fadeOut("slow", function() {
                $(this).remove();
            });
        },
        startRenaming: function() {
            this.set("isRenamingView", !0);
        },
        doneRenaming: function() {
            var a = this.get("model");
            a.save(), this.set("isRenamingView", !1);
        },
        acceptElement: function(a, b) {
            var c = this.get("store").getById("procedure", a);
            if ($(".ember-view #" + b + " .col-md-5 .ember-view ." + a).length <= 0) {
                var d = Ember.View.create({
                    templateName: "procedure-item",
                    container: this.container,
                    id: a,
                    name: c.get("name")
                });
                d.appendTo($(".ember-view #" + b + " .col-md-5").first());
            } else alert('The procedure "' + c.get("name") + '" already exist in the current visit.');
        }
    }
}), App.ProceduresController = Ember.ObjectController.extend({
    isCreating: !1,
    visitCount: 1,
    actions: {
        newProcedure: function() {
            this.set("isCreating", !0), this.transitionToRoute("procedures");
        },
        addProcedure: function() {
            this.set("isCreating", !1);
            var a = this.store.createRecord("procedure", {
                name: this.get("name"),
                performedOn: Date.now(),
                comments: this.get("comments")
            });
            a.save(), this.set("name", ""), this.set("comments", ""), this.transitionToRoute("procedures");
        },
        cancelProcedure: function() {
            this.set("isCreating", !1), this.transitionToRoute("procedures");
        },
        newVisit: function() {
            var a = this.get("visitCount");
            this.incrementProperty("visitCount");
            var b = this.store.createRecord("visit", {
                name: "Visit " + a
            });
            b.save();
            var c = App.VisitController.create({
                model: b,
                store: this.store,
                container: this.container
            }), d = Ember.View.create({
                templateName: "visit-item",
                controller: c,
                container: this.container,
                elementName: "visit" + a,
                store: this.store
            });
            d.appendTo("#listOfVisits");
        }
    }
}), App.SubjectController = Ember.ObjectController.extend({
    isEditing: !1,
    actions: {
        edit: function() {
            this.set("isEditing", !0);
        },
        doneEditing: function() {
            var a = this.get("model");
            a.save(), this.set("isEditing", !1);
        },
        "delete": function() {
            var a = this.get("model");
            a.destroyRecord();
        }
    }
}), App.SubjectsController = Ember.ObjectController.extend({
    isSearching: !1,
    actions: {
        search: function() {
            var a = this.get("searchPattern"), b = this.store.all("subject");
            a && (this.set("isSearching", !0), this.set("model", b.filter(function(b) {
                return null != b.get("firstName") ? b.get("firstName").toLowerCase().match(a.toLowerCase()) : !1;
            })));
        },
        doneSearch: function() {
            this.set("isSearching", !1), this.set("model", this.store.all("subject")), this.transitionToRoute("subjects");
        },
        dropDelete: function(a) {
            var b = this.store.getById("subject", a);
            b.destroyRecord();
        }
    }
}), App.SubjectsAddController = Ember.ObjectController.extend({
    actions: {
        add: function() {
            var a = this.store.createRecord("subject", {
                contactInformation: this.store.createRecord("contactInformation", this.model.contactInformation),
                demographic: this.store.createRecord("demographic", this.model.demographics),
                guardian: this.store.createRecord("guardian", this.model.guardian)
            });
            a.get("allergies").pushObjects(this.model.allergies), a.save().then(function() {
                $("table tr").last().attr("item", a.get("id"));
            }), this.transitionToRoute("subjects");
        },
        addAllergy: function() {
            this.model.allergies.pushObject(this.store.createRecord("allergy", {
                name: "randomName_" + Math.random()
            }));
        }
    }
});