App = {};

var forEach = Ember.EnumerableUtils.forEach;

var get = Ember.get;

function setKey(a, b) {
    a.id = Ember.generateGuid(null, b);
    a.autoGenerated = true;
}

function extractEmbeddedRecords(a, b, c, d) {
    c.eachRelationship(function(c, e) {
        if (a.hasDeserializeRecordsOption(c)) {
            var f = b.modelFor(e.type.typeKey);
            if (e.kind === "hasMany") {
                extractEmbeddedHasMany(b, c, f, e, d);
            }
            if (e.kind === "belongsTo") {
                extractEmbeddedBelongsTo(b, c, f, e, d);
            }
        }
    });
    return d;
}

function extractEmbeddedHasMany(a, b, c, d, e) {
    if (!e[b]) {
        return e;
    }
    var f = [];
    var g = a.serializerFor(c.typeKey);
    var h = a.serializerFor(d.parentType.typeKey);
    var i = h.hasNoKeyOption(b);
    for (var j = 0; j < e[b].length; j++) {
        var k = e[b][j];
        var l = g.normalize(c, k, null);
        if (i && l.id == null) {
            setKey(l, c);
        }
        a.push(c, l);
        f.push(l.id);
    }
    e[b] = f;
    return e;
}

function extractEmbeddedBelongsTo(a, b, c, d, e) {
    if (!e[b]) {
        return e;
    }
    var f = a.serializerFor(c.typeKey);
    var g = a.serializerFor(d.parentType.typeKey);
    var h = g.hasNoKeyOption(b);
    var i = f.normalize(c, e[b], null);
    if (h && i.id == null) {
        setKey(i, c);
    }
    a.push(c, i);
    e[b] = i.id;
    return e;
}

DS.NoKeyMixin = Ember.Mixin.create({
    normalize: function(a, b, c) {
        if (!b) {
            return b;
        }
        this.normalizeId(b);
        this.normalizeAttributes(a, b);
        this.normalizeRelationships(a, b);
        this.normalizeUsingDeclaredMapping(a, b);
        this.applyTransforms(a, b);
        var d = b;
        return extractEmbeddedRecords(this, this.store, a, d);
    },
    serializeBelongsTo: function(a, b, c) {
        var d = c.key;
        if (this.noSerializeOptionSpecified(d)) {
            this._super(a, b, c);
            return;
        }
        var e = this.hasSerializeIdsOption(d);
        var f = this.hasSerializeRecordsOption(d);
        var g = a.get(d);
        var h, i;
        if (e) {
            h = this.keyForRelationship(d, c.kind);
            if (!g) {
                b[h] = null;
            } else {
                b[h] = get(g, "id");
            }
        } else if (f) {
            h = this.keyForAttribute(d);
            if (!g) {
                b[h] = null;
            } else {
                i = this.hasNoKeyOption(h) === false;
                b[h] = g.serialize({
                    includeId: i
                });
                this.removeEmbeddedForeignKey(a, g, c, b[h]);
            }
        }
    },
    serializeHasMany: function(a, b, c) {
        var d = c.key;
        if (this.noSerializeOptionSpecified(d)) {
            this._super(a, b, c);
            return;
        }
        var e = this.hasSerializeIdsOption(d);
        var f = this.hasSerializeRecordsOption(d);
        var g, h;
        if (e) {
            g = this.keyForRelationship(d, c.kind);
            b[g] = get(a, d).mapBy("id");
        } else if (f) {
            g = this.keyForAttribute(d);
            b[g] = get(a, d).map(function(b) {
                h = this.hasNoKeyOption(g) === false;
                var d = b.serialize({
                    includeId: h
                });
                this.removeEmbeddedForeignKey(a, b, c, d);
                return d;
            }, this);
        }
    },
    hasNoKeyOption: function(a) {
        var b = this.attrsOption(a);
        return b && b.noKey === true && b.embedded === "always";
    }
});

App.DatePicker = Ember.TextField.extend({
    didInsertElement: function() {
        var a, b;
        a = this.get("format");
        b = function(a) {
            return function(b) {
                return a.set("date", b.date);
            };
        }(this);
        return this.$().datetimepicker({
            format: a,
            autoclose: true
        }).on("changeDate", b);
    },
    willDestroyElement: function() {
        return this.$().datetimepicker("remove");
    }
});

App.DragElementComponent = Ember.Component.extend({
    tagName: "div",
    attributeBindings: [ "draggable", "elementName", "item", "tag:tagName", "id", "class", "dragType" ],
    draggable: "true",
    elementName: null,
    item: null,
    dragStart: function(a) {
        var b = this.get("dragType");
        if (b == "visits") {
            $(this.element).animate({
                opacity: .25
            }, 500);
            var c = $(this.element).clone(true);
            c.contents().filter(".list-group-item").addClass("dragging-element");
            c.contents().filter(".list-group-item").contents().filter("button").remove();
            c.addClass("drag-element");
            a.dataTransfer.effectAllowed = "copy";
            document.body.appendChild(c[0]);
            a.dataTransfer.setDragImage(c[0], 0, 0);
        }
        if (this.get("elementName")) {
            var d = {};
            d.container = true;
            d.item = this.get("item");
            d.elementName = this.get("elementName");
            a.dataTransfer.setData("text", JSON.stringify(d));
        } else {
            a.dataTransfer.setData("text", JSON.stringify(this.get("item")));
        }
    },
    dragEnd: function(a) {
        var b = this.get("dragType");
        if (b == "visits") {
            $(this.element).animate({
                opacity: 1
            }, 500);
        }
    }
});

App.DropElementComponent = Ember.Component.extend({
    tagName: "div",
    attributeBindings: [ "elementName" ],
    elementName: "",
    dragOver: function(a) {
        a.preventDefault();
        a.stopPropagation();
        return false;
    },
    drop: function(a) {
        var b = a.dataTransfer.getData("text");
        var c = JSON.parse(b);
        a.preventDefault();
        if (c.container) {
            this.sendAction("dropAction", c.item, this.elementName, c.elementName);
        } else {
            this.sendAction("dropAction", c, this.elementName);
        }
        return false;
    }
});

ProtocolApp = Em.Application.create({
    rootElement: $(".view-container")
});

ProtocolApp.Router.reopen({
    rootURL: "/protocols/"
});

ProtocolApp.ApplicationAdapter = DS.RESTAdapter.extend({
    host: "http://localhost:8081/api"
});

ProtocolApp.Router.map(function() {
    this.resource("protocols", {
        path: "/"
    }, function() {
        this.route("configure", {
            path: "/:id"
        });
        this.route("add", {
            path: "/add"
        });
    });
    this.resource("procedures", function() {
        this.resource("procedure", {
            path: "/:id"
        }, function() {
            this.route("edit");
        });
        this.route("add");
    });
});

ProtocolApp.ProtocolsIndexRoute = Ember.Route.extend({
    model: function() {
        return this.store.find("protocol");
    }
});

ProtocolApp.ProtocolsConfigureRoute = Ember.Route.extend({
    model: function(a) {
        return this.store.find("protocol", a.id);
    }
});

ProtocolApp.ProtocolsAddRoute = Ember.Route.extend({
    model: function() {
        return this.store.createRecord("protocol");
    }
});

ProtocolApp.ProceduresRoute = Ember.Route.extend({
    model: function() {
        return this.store.find("procedure");
    }
});

ProtocolApp.ProcedureRoute = Ember.Route.extend({
    model: function(a) {
        return this.store.find("procedure", a.id);
    }
});

ProtocolApp.Procedure = DS.Model.extend({
    name: DS.attr("string"),
    performedOn: DS.attr("date"),
    comments: DS.attr("string")
});

ProtocolApp.Protocol = DS.Model.extend({
    name: DS.attr("string"),
    description: DS.attr("string"),
    enrollmentWindow: DS.attr("string"),
    visits: DS.hasMany("visit")
});

ProtocolApp.Visit = DS.Model.extend({
    label: DS.attr("string"),
    number: DS.attr("number"),
    procedures: DS.hasMany("procedure")
});

ProtocolApp.Protocol.reopenClass({
    FIXTURES: [ {
        id: 1,
        name: "L1V-MC-4590MK"
    }, {
        id: 2,
        name: "L2V-UI-3510MK"
    } ]
});

ProtocolApp.Visit.reopenClass();

ProtocolApp.Procedure.reopenClass({
    FIXTURES: [ {
        id: 1,
        name: "Measure presure",
        performedOn: null,
        comments: "This is test comment1"
    }, {
        id: 2,
        name: "Breath checking",
        performedOn: null,
        comments: "This is test comment2"
    }, {
        id: 3,
        name: "X rays",
        performedOn: null,
        comments: "This is test comment3"
    }, {
        id: 4,
        name: "Height",
        performedOn: null,
        comments: "This is test comment4"
    }, {
        id: 5,
        name: "Electrocardiogram",
        comments: ""
    } ]
});

App.ProcedureItemView = Ember.View.extend({});

App.VisitItemView = Ember.View.extend({
    templateName: "visit-item",
    attributeBindings: [ "elementName", "id", "name" ]
});

ProtocolApp.ProcedureController = Ember.ObjectController.extend({
    isEditing: false,
    actions: {
        edit: function() {
            this.set("isEditing", true);
        },
        doneEditing: function() {
            var a = this.get("model");
            a.save().then(function() {
                $("." + a.get("id") + " span").each(function() {
                    $(this).text(a.get("name"));
                });
            });
            this.set("isEditing", false);
        },
        "delete": function() {
            var a = this.get("model");
            $("." + a.get("id")).each(function() {
                $(this).fadeOut("slow", function() {
                    $(this).remove();
                });
            }).then(function() {
                a.destroyRecord();
            });
            this.transitionToRoute("procedures");
        }
    }
});

ProtocolApp.VisitController = Ember.ObjectController.extend({
    needs: [ "procedures" ],
    isRenamingView: false,
    actions: {
        destroyVisit: function(a) {
            $(".ember-view #" + a).fadeOut("slow", function() {
                $(this).remove();
            });
        },
        startRenaming: function() {
            this.toggleProperty("isRenamingView");
        },
        doneRenaming: function() {
            var a = this.get("model");
            a.save();
            this.toggleProperty("isRenamingView");
        },
        acceptElement: function(a, b, c) {
            var d = this.get("controllers.procedures").store.getById("procedure", a);
            if ($(".ember-view #" + b + " .col-md-5 .ember-view ." + a).length <= 0) {
                var e = Ember.View.create({
                    templateName: "procedure-item",
                    container: this.container,
                    id: a,
                    name: d.get("name")
                });
                e.appendTo($(".ember-view " + "#" + b + " .col-md-5").first());
            } else {
                alert('The procedure "' + d.get("name") + '" already exist in the current visit.');
            }
        }
    }
});

ProtocolApp.ProceduresController = Ember.ObjectController.extend({
    isCreating: false,
    visitCount: function() {
        var a = this.store.find("visit");
        return a.get("length");
    }.property(),
    actions: {
        newProcedure: function() {
            this.toggleProperty("isCreating");
            this.transitionToRoute("procedures");
        },
        addProcedure: function() {
            this.toggleProperty("isCreating");
            var a = this.store.createRecord("procedure", {
                name: this.get("name"),
                performedOn: Date.now(),
                comments: this.get("comments")
            });
            a.save();
            this.set("name", "");
            this.set("comments", "");
            this.transitionToRoute("procedures");
        },
        cancelProcedure: function() {
            this.set("isCreating", false);
            this.transitionToRoute("procedures");
        },
        newVisit: function() {
            this.incrementProperty("visitCount");
            var a = this.get("visitCount");
            var b = this.store.createRecord("visit", {
                label: "Visit " + a
            });
            b.save();
            var c = App.VisitController.create({
                model: b,
                container: this.container
            });
            var d = Ember.View.create({
                templateName: "visit-item",
                controller: c,
                container: this.container,
                elementName: "visit" + a,
                store: this.store
            });
            d.appendTo("#listOfVisits");
        }
    }
});

ProtocolApp.ProtocolController = Ember.ObjectController.extend({
    isEditing: false,
    actions: {
        edit: function() {
            this.set("isEditing", true);
        },
        doneEditing: function() {},
        "delete": function() {}
    }
});

ProtocolApp.ProtocolsAddController = Ember.ObjectController.extend({
    actions: {
        add: function() {
            var a = this.get("model");
            a.save().then(function() {
                console.log(a.get("id"));
            });
            this.transitionToRoute("protocols");
        }
    }
});