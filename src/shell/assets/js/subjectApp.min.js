App = {};

Ember.HTMLBars._registerHelper("ifIsNthItem", function(a, b, c, d) {
    var e = d.data.view.contentIndex + 1, f = b.nth;
    if (e % f === 0) {
        return c.template.render(this, d, c.morph.contextualElement);
    }
});

var forEach = Ember.EnumerableUtils.forEach;

var get = Ember.get;

function setKey(a, b) {
    a.id = Ember.generateGuid(null, b);
    a.autoGenerated = true;
}

function extractEmbeddedRecords(a, b, c, d) {
    c.eachRelationship(function(c, e) {
        if (a.hasDeserializeRecordsOption(c)) {
            var f = b.modelFor(e.type.typeKey);
            if (e.kind === "hasMany") {
                extractEmbeddedHasMany(b, c, f, e, d);
            }
            if (e.kind === "belongsTo") {
                extractEmbeddedBelongsTo(b, c, f, e, d);
            }
        }
    });
    return d;
}

function extractEmbeddedHasMany(a, b, c, d, e) {
    if (!e[b]) {
        return e;
    }
    var f = [];
    var g = a.serializerFor(c.typeKey);
    var h = a.serializerFor(d.parentType.typeKey);
    var i = h.hasNoKeyOption(b);
    for (var j = 0; j < e[b].length; j++) {
        var k = e[b][j];
        var l = g.normalize(c, k, null);
        if (i && l.id == null) {
            setKey(l, c);
        }
        a.push(c, l);
        f.push(l.id);
    }
    e[b] = f;
    return e;
}

function extractEmbeddedBelongsTo(a, b, c, d, e) {
    if (!e[b]) {
        return e;
    }
    var f = a.serializerFor(c.typeKey);
    var g = a.serializerFor(d.parentType.typeKey);
    var h = g.hasNoKeyOption(b);
    var i = f.normalize(c, e[b], null);
    if (h && i.id == null) {
        setKey(i, c);
    }
    a.push(c, i);
    e[b] = i.id;
    return e;
}

DS.NoKeyMixin = Ember.Mixin.create({
    normalize: function(a, b, c) {
        if (!b) {
            return b;
        }
        this.normalizeId(b);
        this.normalizeAttributes(a, b);
        this.normalizeRelationships(a, b);
        this.normalizeUsingDeclaredMapping(a, b);
        this.applyTransforms(a, b);
        var d = b;
        return extractEmbeddedRecords(this, this.store, a, d);
    },
    serializeBelongsTo: function(a, b, c) {
        var d = c.key;
        if (this.noSerializeOptionSpecified(d)) {
            this._super(a, b, c);
            return;
        }
        var e = this.hasSerializeIdsOption(d);
        var f = this.hasSerializeRecordsOption(d);
        var g = a.get(d);
        var h, i;
        if (e) {
            h = this.keyForRelationship(d, c.kind);
            if (!g) {
                b[h] = null;
            } else {
                b[h] = get(g, "id");
            }
        } else if (f) {
            h = this.keyForAttribute(d);
            if (!g) {
                b[h] = null;
            } else {
                i = this.hasNoKeyOption(h) === false;
                b[h] = g.serialize({
                    includeId: i
                });
                this.removeEmbeddedForeignKey(a, g, c, b[h]);
            }
        }
    },
    serializeHasMany: function(a, b, c) {
        var d = c.key;
        if (this.noSerializeOptionSpecified(d)) {
            this._super(a, b, c);
            return;
        }
        var e = this.hasSerializeIdsOption(d);
        var f = this.hasSerializeRecordsOption(d);
        var g, h;
        if (e) {
            g = this.keyForRelationship(d, c.kind);
            b[g] = get(a, d).mapBy("id");
        } else if (f) {
            g = this.keyForAttribute(d);
            b[g] = get(a, d).map(function(b) {
                h = this.hasNoKeyOption(g) === false;
                var d = b.serialize({
                    includeId: h
                });
                this.removeEmbeddedForeignKey(a, b, c, d);
                return d;
            }, this);
        }
    },
    hasNoKeyOption: function(a) {
        var b = this.attrsOption(a);
        return b && b.noKey === true && b.embedded === "always";
    }
});

App.DatePicker = Ember.TextField.extend({
    didInsertElement: function() {
        var a, b;
        a = this.get("format");
        b = function(a) {
            return function(b) {
                return a.set("date", b.date);
            };
        }(this);
        return this.$().datetimepicker({
            format: a,
            autoclose: true
        }).on("changeDate", b);
    },
    willDestroyElement: function() {
        return this.$().datetimepicker("remove");
    }
});

App.DragElementComponent = Ember.Component.extend({
    tagName: "div",
    attributeBindings: [ "draggable", "elementName", "item", "tag:tagName", "id", "class" ],
    draggable: "true",
    elementName: null,
    item: null,
    dragStart: function(a) {
        var b = $(this.element).clone(true);
        b = b.contents().filter("li");
        b.addClass("ui-draggable-dragging");
        a.dataTransfer.effectAllowed = "copy";
        document.body.appendChild(b[0]);
        a.dataTransfer.setDragImage(b[0], 0, 0);
        if (this.get("elementName")) {
            var c = {};
            c.container = true;
            c.item = this.get("item");
            c.elementName = this.get("elementName");
            a.dataTransfer.setData("text", JSON.stringify(c));
        } else {
            a.dataTransfer.setData("text", JSON.stringify(this.get("item")));
        }
    },
    dragEnd: function(a) {
        $("body li").last().remove();
    }
});

App.DropElementComponent = Ember.Component.extend({
    tagName: "div",
    attributeBindings: [ "elementName" ],
    elementName: "",
    dragOver: function(a) {
        a.preventDefault();
        a.stopPropagation();
        return false;
    },
    drop: function(a) {
        var b = a.dataTransfer.getData("text");
        var c = JSON.parse(b);
        a.preventDefault();
        if (c.container) {
            this.sendAction("dropAction", c.item, this.elementName, c.elementName);
        } else {
            this.sendAction("dropAction", c, this.elementName);
        }
        return false;
    }
});

SubjectApp = Em.Application.create({
    rootElement: $(".view-container")
});

SubjectApp.Router.reopen({
    rootURL: "/subjects/"
});

SubjectApp.ApplicationAdapter = DS.RESTAdapter.extend({
    host: "http://localhost:8082/api"
});

SubjectApp.Router.map(function() {
    this.resource("subjects", {
        path: "/"
    }, function() {
        this.route("add", {
            path: "/add"
        });
    });
    this.resource("subject", {
        path: "/:id"
    }, function() {
        this.route("edit");
    });
    this.resource("allergies", function() {
        this.resource("allergy", {
            path: "/:id"
        }, function() {
            this.route("edit");
        });
        this.route("add");
    });
    this.resource("dnd");
});

SubjectApp.SubjectsIndexRoute = Ember.Route.extend({
    model: function() {
        return this.store.find("subject");
    }
});

SubjectApp.SubjectRoute = Ember.Route.extend({
    model: function(a) {
        return this.store.find("subject", a.id);
    }
});

SubjectApp.SubjectsAddRoute = Ember.Route.extend({
    model: function() {
        return {
            contactInformation: {},
            demographic: {},
            guardian: {},
            allergies: []
        };
    }
});

SubjectApp.AllergiesRoute = Ember.Route.extend({
    model: function() {
        return this.store.find("allergy");
    }
});

SubjectApp.AllergyRoute = Ember.Route.extend({
    model: function(a) {
        return this.store.find("allergy", a.id);
    }
});

SubjectApp.DndRoute = Ember.Route.extend({
    model: function() {
        return {
            inFolder: [ {
                id: 1,
                name: "Procedure 1"
            }, {
                id: 2,
                name: "Procedure 2"
            }, {
                id: 3,
                name: "Procedure 3"
            } ],
            inTrash: [ {
                id: 4,
                name: "Procedure 4"
            } ]
        };
    }
});

SubjectApp.Subject = DS.Model.extend({
    contactInformation: DS.belongsTo("contactInformation", {
        inverse: null,
        async: true
    }),
    demographic: DS.belongsTo("demographic", {
        inverse: null,
        async: true
    }),
    guardian: DS.belongsTo("guardian", {
        inverse: null,
        async: true
    }),
    allergies: DS.hasMany("allergy", {
        inverse: null,
        async: true
    })
});

SubjectApp.SubjectSerializer = DS.RESTSerializer.extend(DS.EmbeddedRecordsMixin, DS.NoKeyMixin, {
    attrs: {
        contactInformation: {
            embedded: "always",
            noKey: true
        },
        demographics: {
            embedded: "always",
            noKey: true
        },
        guardian: {
            embedded: "always",
            noKey: true
        },
        allergies: {
            embedded: "always",
            noKey: true
        }
    }
});

SubjectApp.ContactInformation = DS.Model.extend({
    firstName: DS.attr("string"),
    middleName: DS.attr("string"),
    lastName: DS.attr("string"),
    address: DS.attr("string"),
    zipCode: DS.attr("string"),
    city: DS.attr("string"),
    state: DS.attr("string"),
    country: DS.attr("string"),
    email: DS.attr("string"),
    homePhone: DS.attr("string"),
    workPhone: DS.attr("string"),
    cellPhone: DS.attr("string"),
    alternatedCellPhone: DS.attr("string"),
    fullName: function() {
        var a = " " + this.get("middleName");
        if (a.length > 1) a = a + " ";
        return this.get("firstName") + a + this.get("lastName");
    }.property("firstName", "middleName", "lastName")
});

SubjectApp.Demographic = DS.Model.extend({
    birthday: DS.attr("string"),
    gender: DS.attr("string"),
    height: DS.attr("number"),
    weight: DS.attr("number"),
    heartRate: DS.attr("string"),
    bloodPreasure: DS.attr("string"),
    race: DS.attr("string"),
    ethnicity: DS.attr("string"),
    maritalStatus: DS.attr("string")
});

SubjectApp.Guardian = DS.Model.extend({
    name: DS.attr("string"),
    relationShip: DS.attr("string"),
    facilityType: DS.attr("string"),
    facility: DS.attr("string"),
    address: DS.attr("string"),
    email: DS.attr("string"),
    phone: DS.attr("string")
});

SubjectApp.Medication = DS.Model.extend({
    name: DS.attr("string"),
    dosage: DS.attr("string"),
    from: DS.attr("date"),
    to: DS.attr("date"),
    comments: DS.attr("string")
});

SubjectApp.Condition = DS.Model.extend({
    name: DS.attr("string"),
    since: DS.attr("date"),
    comments: DS.attr("string")
});

SubjectApp.Allergy = DS.Model.extend({
    name: DS.attr("string"),
    reaction: DS.attr("string"),
    reactionOn: DS.attr("date"),
    comments: DS.attr("string")
});

SubjectApp.Immunization = DS.Model.extend({
    name: DS.attr("string"),
    administeredOn: DS.attr("date"),
    comments: DS.attr("string")
});

SubjectApp.Subject.reopenClass({
    FIXTURES: [ {
        id: 1,
        contactInformation: 1
    }, {
        id: 2,
        contactInformation: 2
    } ]
});

SubjectApp.ContactInformation.reopenClass({
    FIXTURES: [ {
        id: 1,
        firstName: "Jorge",
        middleName: "",
        lastName: "Rodriguez",
        age: 25,
        birthday: "02/20/2014 12:01 AM"
    }, {
        id: 2,
        firstName: "Jesus",
        middleName: "",
        lastName: "Perez",
        age: 35,
        birthday: "02/20/2014 12:00 AM"
    } ]
});

SubjectApp.SubjectSharedView = Ember.View.extend({
    templateName: "subject-shared"
});

SubjectApp.AlergyController = Ember.ObjectController.extend({
    isEditing: false,
    actions: {
        edit: function() {
            this.set("isEditing", true);
        },
        doneEditing: function() {
            var a = this.get("model");
            a.save();
            this.set("isEditing", false);
        },
        "delete": function() {
            var a = this.get("model");
            a.destroyRecord();
        }
    }
});

SubjectApp.AlergiesController = Ember.ObjectController.extend({
    isSearching: false,
    actions: {
        search: function() {
            var a = this.get("searchPattern");
            var b = this.store.all("alergy");
            if (a) {
                this.set("isSearching", true);
                this.set("model", b.filter(function(b) {
                    return b.get("name").toLowerCase().match(a.toLowerCase());
                }));
            }
        },
        doneSearch: function() {
            this.set("isSearching", false);
            this.set("model", this.store.all("alergy"));
            this.transitionToRoute("alergies");
        }
    }
});

SubjectApp.AlergiesAddController = Ember.ObjectController.extend({
    actions: {
        add: function() {
            var a = this.store.createRecord("alergy", {
                name: this.get("name"),
                reaction: this.get("reaction"),
                reactionOn: Date.now(),
                comments: this.get("comments")
            });
            a.save();
            this.transitionToRoute("alergies");
        }
    }
});

SubjectApp.SubjectController = Ember.ObjectController.extend({
    isEditing: false,
    actions: {
        edit: function() {
            this.set("isEditing", true);
        },
        doneEditing: function() {
            var a = this.get("model");
            a.save();
            this.set("isEditing", false);
        },
        "delete": function() {
            var a = this.get("model");
            a.destroyRecord();
        }
    }
});

SubjectApp.SubjectsAddController = Ember.ObjectController.extend({
    inContactInfo: true,
    inDemogrphs: false,
    inGuardian: false,
    inMedication: false,
    inConditions: false,
    inAllergies: false,
    inInmunization: false,
    actions: {
        add: function() {
            var a = this.store.createRecord("subject", {
                contactInformation: this.store.createRecord("contactInformation", this.model.contactInformation),
                demographic: this.store.createRecord("demographic", this.model.demographics),
                guardian: this.store.createRecord("guardian", this.model.guardian)
            });
            a.get("allergies").pushObjects(this.model.allergies);
            a.save().then(function() {
                $("table tr").last().attr("item", a.get("id"));
            });
            this.transitionToRoute("subjects");
        },
        addAllergy: function() {
            this.model.allergies.pushObject(this.store.createRecord("allergy", {
                name: "randomName_" + Math.random()
            }));
        },
        showContactInfo: function() {
            this.hideAll();
            this.set("inContactInfo", true);
        },
        showDemogrphs: function() {
            this.hideAll();
            this.set("inDemogrphs", true);
        },
        showGuardian: function() {
            this.hideAll();
            this.set("inGuardian", true);
        },
        showMedication: function() {
            this.hideAll();
            this.set("inMedication", true);
        },
        showConditions: function() {
            this.hideAll();
            this.set("inConditions", true);
        },
        showAllergies: function() {
            this.hideAll();
            this.set("inAllergies", true);
        },
        showInmunization: function() {
            this.hideAll();
            this.set("inInmunization", true);
        }
    },
    hideAll: function() {
        this.set("inContactInfo", false);
        this.set("inDemogrphs", false);
        this.set("inGuardian", false);
        this.set("inMedication", false);
        this.set("inConditions", false);
        this.set("inAllergies", false);
        this.set("inInmunization", false);
    }
});

SubjectApp.IndexController = Ember.ObjectController.extend({
    isSearching: false,
    actions: {
        search: function() {
            var a = this.get("searchPattern");
            var b = this.store.all("subject");
            if (a) {
                this.set("isSearching", true);
                this.set("model", b.filter(function(b) {
                    if (b.get("firstName") != null) return b.get("firstName").toLowerCase().match(a.toLowerCase()); else return false;
                }));
            }
        },
        doneSearch: function() {
            this.set("isSearching", false);
            this.set("model", this.store.all("subject"));
            this.transitionToRoute("subjects");
        },
        dropDelete: function(a, b, c) {
            var d = this.store.getById("subject", a);
            d.destroyRecord();
        }
    }
});